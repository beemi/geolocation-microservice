name: Build, Tag, and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-tag-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.set_version.outputs.VERSION }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check for existing tags
        id: check_tags
        run: |
          git fetch --tags
          TAG_COUNT=$(git tag | wc -l)
          echo "tag_count=$TAG_COUNT" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        if: github.event_name == 'workflow_dispatch' && steps.check_tags.outputs.tag_count != '0'
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set changelog
        id: set_changelog
        run: |
          if [ "${{ steps.check_tags.outputs.tag_count }}" = "0" ]; then
            echo "changelog=🎉 Initial release" >> $GITHUB_OUTPUT
          else
            echo "changelog=${{ steps.changelog.outputs.changelog }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ steps.set_version.outputs.VERSION }} -m "Release ${{ steps.set_version.outputs.VERSION }}"
          git push origin v${{ steps.set_version.outputs.VERSION }}


      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.set_version.outputs.VERSION }}
          release_name: 🚀 Release ${{ steps.set_version.outputs.VERSION }}
          body: |
            ## 🎉 What's New
            
            ${{ steps.set_changelog.outputs.changelog }}
            
            ## 🐳 Docker Image
            
            Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_version.outputs.VERSION }}`
            
            ## 📦 Installation
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_version.outputs.VERSION }}
            ```
            
            ## 🙏 Thank You
            
            Thanks to all contributors who made this release possible!

      - name: Summary
        run: |
          echo "# 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ Version" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.set_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
